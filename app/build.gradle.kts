import java.io.BufferedOutputStream
import java.io.FileOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

    // https://docs.aws.amazon.com/lambda/latest/dg/lambda-java.html
    implementation("com.amazonaws:aws-lambda-java-core:1.2.3")

    // https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/setup-project-gradle.html
    implementation(platform("software.amazon.awssdk:bom:2.29.23"))
    implementation("software.amazon.awssdk:s3")

    // https://mvnrepository.com/artifact/com.fasterxml.jackson/jackson-bom
    implementation(platform("com.fasterxml.jackson:jackson-bom:2.18.2"))
    implementation("com.fasterxml.jackson.core:jackson-databind")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.asacxyz.App"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

abstract class BuildLambdaDeploymentZIP : DefaultTask() {
    private val lib = File("lib/")
    private val jarFolderInsideZipFile = "app/lib/"
    private val zipFileGeneratedOnBuildTask = "app/build/distributions/app.zip"
    private val finalZip = File("app.zip")

    @TaskAction
    fun action() {
        this.prepareLibDirectory()
        this.copyJarsToLibDirectory()
        this.zipLibDirectory()
        this.deleteLibDirectory()
    }

    private fun prepareLibDirectory() {
        this.deleteLibDirectory()
        this.lib.mkdir()
    }

    private fun deleteLibDirectory() {
        this.lib.deleteRecursively()
    }

    private fun copyJarsToLibDirectory() {
        ZipFile(this.zipFileGeneratedOnBuildTask).use { zip ->
            zip.entries()
                .asSequence()
                .filter { this.isFile(it) }
                .forEach { entry ->
                    val outputFile = this.createFileInLibFolder(entry)
                    zip.getInputStream(entry).use { input ->
                        outputFile.outputStream().use { output ->
                            input.copyTo(output)
                        }
                    }

                }
        }
    }

    private fun isFile(entry: ZipEntry): Boolean {
        return entry.name.startsWith(this.jarFolderInsideZipFile) && !entry.isDirectory
    }

    private fun createFileInLibFolder(entry: ZipEntry): File {
        return File(this.lib, entry.name.removePrefix(this.jarFolderInsideZipFile))
    }

    private fun zipLibDirectory() {
        ZipOutputStream(BufferedOutputStream(FileOutputStream(this.finalZip))).use { zos ->
            this.lib.listFiles()
                ?.forEach { file ->
                    val zipFileName = file.absolutePath.removePrefix(this.lib.absolutePath)
                    zos.putNextEntry(ZipEntry("lib/" + zipFileName))
                    file.inputStream().use { fis -> fis.copyTo(zos) }
                    zos.closeEntry()
                }
        }
    }
}

tasks.register<BuildLambdaDeploymentZIP>("buildLambdaDeploymentZIP") {
    group = "custom"
    description = "Generates a ZIP file structured for AWS Lambda requirements."
    dependsOn("build")
}